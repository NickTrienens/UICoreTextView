{"google":"UA-37728931-1","tagline":"Easy to use UIView which supports rendering using CoreText","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"UICoreTextView\r\n==============\r\n\r\n<img src='https://raw.github.com/giladno/UICoreTextView/gh-pages/images/screenshot.png' />\r\n\r\n# Overview\r\niOS controls (such as [UILabel](http://developer.apple.com/library/ios/#documentation/uikit/reference/UILabel_Class/Reference/UILabel.html#//apple_ref/occ/instp/UILabel/attributedText) and [UITextView](http://developer.apple.com/library/ios/#documentation/uikit/reference/uitextview_class/Reference/UITextView.html#//apple_ref/occ/instp/UITextView/attributedText)) already support NSAttributedString, but UICoreTextView offers much more than simple styling.\r\nIf your app needs to render both text & images, or have some custom rendering on the fly - then UICoreTextView is for you.\r\n\r\nThere is another great core text library by Oliver Drobnik: <a href='https://github.com/Cocoanetics/DTCoreText'>DTCoreText</a>. My goal was to create a very tiny and easy to use component (2 files only!) which is meant for simple tasks. If you really need full control of your output, I suggest to take a look at DTCoreText.\r\n\r\nUICoreTextView contains 2 major components:\r\n\r\n* <b>UICoreTextView</b> - UIView based, used to render the string\r\n* <b>HTMLParser</b> - HTML parser which generates an instance of NSAttributedString. There is also a category for NSAttributedString, for easy creation of NSAttributedString objects.\r\n\r\nExamples\r\n-\r\n\r\nPlease also refer to the demo project for a working demo.\r\n\r\n#### Basic styling\r\n``` objective-c\r\nm_coreText.attributedString=[NSAttributedString attributedStringWithHTML:@\"<span font='Papyrus' size='12' color='rgba(255,0,255,0.5)'>This is a styled string</span>\"];\r\n```\r\n\r\n#### Custom Rendering\r\n###### 50x50 Blue circle renderer\r\n``` objective-c\r\n@interface BlueCircle : NSObject<HTMLRenderer>\r\n@end\r\n\r\n@implementation BlueCircle\r\n-(CGSize)size\r\n{\r\n\treturn CGSizeMake(50, 50);\r\n}\r\n-(void)renderInContext:(CGContextRef)context rect:(CGRect)rect\r\n{\r\n\tCGContextSetFillColorWithColor(context, [UIColor blueColor].CGColor);\r\n\tCGContextFillEllipseInRect(context, rect);\r\n}\r\n@end\r\n```\r\n###### Using the renderer callback\r\n``` objective-c\r\nNSString* html=@\"DIV elements generate custom renderers: <div />\";\r\nm_coreText.attributedString=[NSAttributedString attributedStringWithHTML:html renderer:^id<HTMLRenderer>(NSMutableDictionary* attributes)\r\n{\r\n\treturn [[BlueCircle alloc] init];\r\n}];\r\n```\r\n\r\nStyling\r\n-\r\n\r\nSince UICoreTextView was designed mainly to work with custom renderers - passing attributes from the HTML to the callback should be as simple as possible. For that reason, the syntax is based on plain old HTML tags and not modern CSS. The callback receives an instance of NSMutableAttributes, which contains all available attributes of that HTML node.\r\n\r\nThe syntax was meant to be as simple as possible and at no point was it designed to follow HTML standards. For that reason, some of the HTML tags/attributes might differ from the original specs (for example, &lt;s&gt; for stroke rather than &lt;stroke&gt;)\r\n\r\n### Text\r\n``` html\r\n<span font='ArialMT|Georgia|...' size='16'>Font manipulation, we can change font name and size</font>\r\n\r\n<b>Bold>\r\n<u style='none|single|thick|double'>Underline</u>\r\n<i>Italic</i>\r\n<s width='3' color='rgb(255,0,0)'>Red stroke</s>\r\n\r\n<span align='natural|left|right|center|justified'>Aligned text</span>\r\n<span direction='rtl|ltr'>RTL or LTR text</span>\r\n<span wrap='word|break-word|clip|ellipsis-head|ellipsis-tail|ellipsis-middle'>Wrapped text</span>\r\n```\r\n\r\n### Colors\r\n``` html\r\n<span color='#FF0000'>Standard HTML colors</span>\r\n<span color='rgb(255,0,0)'>RGB color</span>\r\n<span color='rgba(255,0,0,0.5)'>RGBA color</span>\r\n```\r\n\r\n### Links\r\nBy default, all links will render using a blue color and a single underline (which you can override using the <code>color</code> tag and an embedded <code>u</code> tag).\r\nUICoreTextView will try by default to open any link using <code>[[UIApplication sharedApplication] openURL:url]</code>. You can prevent this behaviour by returning YES from <code>-(BOOL)coreTextView:(UICoreTextView*)view openURL:(NSURL*)url</code> delegate.\r\n\r\n``` html\r\n<a href='http://www.google.com/'>Google.com</a>\r\n<a href='tel:+180012345678'>Click to call</a>\r\n```\r\n\r\n### Images\r\nImages can be embedded using the <b>base64:</b> prefix or be loaded from disk. Images will be loaded using <code>[UIImage imageNamed:src]</code> - unless the <b>file://</b> scheme is specified.\r\nFor images, you can also use the <code>valign='middle'</code> attribute to center them vertically.\r\n\r\n``` html\r\n<img src='base64:iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==' />\r\n<img width='50' height='50' src='avatar.png' />\r\n<img src='file://..../house.jpg' valign='middle' />\r\n```\r\n\r\n### Others\r\n``` html\r\n<br>\r\n<hr height='5' color='#FF0000' />\r\n```\r\n\r\nCustom Renderer\r\n-\r\n\r\nSometimes your app needs to render some content dynamically. One option would be to generate an image and create a new NSAttributedString every time - or you can use a custom renderer.\r\n\r\nCustom renderers use a callback, passing a graphic context to draw into. An app can then use it to draw whatever it needs.\r\n\r\nTo create a custom renderer, simply use a <code>div</code> tag inside your HTML. You can also set custom attributes which will be passed to the renderer factory. Custom attributes allow you to distinguish between different renderers in the same HTML.\r\n\r\nTo be able to create a custom renderer, you'll need to pass a callback to the HTML parser:\r\n\r\n``` objective-c\r\nNSString* html=@\"<div type='square' /><div type='circle' />\";\r\nm_coreText.attributedString=[NSAttributedString attributedStringWithHTML:html renderer:^id<HTMLRenderer>(NSMutableDictionary* attributes)\r\n{\r\n\tif ([attributes[@\"type\"] isEqualToString:@\"circle\"])\r\n\t{\r\n\t...\r\n\t}\r\n\treturn m_customRenderer;\r\n}];\r\n```\r\n\r\nA custom renderer can be any object defining the <code>HTMLRenderer</code> protocol:\r\n\r\n``` objective-c\r\n@protocol HTMLRenderer<NSObject>\r\n@required\r\n@property(nonatomic,readonly) CGSize size;\r\n@optional\r\n@property(nonatomic,readonly) CGFloat ascent;\r\n@property(nonatomic,readonly) CGFloat descent;\r\n\r\n@required\r\n-(void)renderInContext:(CGContextRef)context rect:(CGRect)rect;\r\n@end\r\n```\r\n\r\nThe only 2 required methods are <code>-(CGSize>size</code> and <code>-(void)renderInContext:(CGContextRef)context rect:(CGRect)rect</code>, so if we want to draw a simple blue circle, our renderer will be similar to the following implementation:\r\n\r\n``` objective-c\r\n@interface BlueCircle : NSObject<HTMLRenderer>\r\n@end\r\n@implementation BlueCircle\r\n-(CGSize)size\r\n{\r\n\treturn CGSizeMake(50, 50);\t// make our circle 50x50 points\r\n}\r\n-(void)renderInContext:(CGContextRef)context rect:(CGRect)rect\r\n{\r\n\tCGContextSetFillColorWithColor(context, [UIColor blueColor].CGColor);\r\n\tCGContextFillEllipseInRect(context, rect);\r\n}\r\n@end\r\n```\r\n\r\nWe then use the parser's factory callback to create a new instance of <code>BlueCircle</code>. The new renderer will be retained by the resulting NSAttributedString.\r\n\r\n``` objective-c\r\nm_coreText.attributedString=[NSAttributedString attributedStringWithHTML:@\"Hello <div /> World\" renderer:^id<HTMLRenderer>(NSMutableDictionary* attributes)\r\n{\r\n\treturn [[BlueCircle alloc] init];\r\n}];\r\n```\r\n\r\n# Setup\r\n\r\nEverything is contained in 2 files only: UICoreTextView.mm & UICoreTextView.h.\r\n\r\nUICoreTextView uses ARC. If your project does not use ARC, you'll need to set the following flag for UICoreTextView.mm: <code>-fobjc-arc</code> (<a href='http://stackoverflow.com/questions/10523816/how-to-enable-arc-for-a-single-file'>How to enable ARC for a single file</a>)\r\n\r\nYou'll also need to include <code>libxml2.dylib</code> in your project:\r\n\r\n* Link your project against <code>libxml2.dylib</code> and <code>CoreText.framework</code>\r\n* Under your build settings, add the following path under <b>\"Header Search Paths\"</b>: <code>/usr/include/libxml2</code>\r\n\r\n# Credits\r\n\r\nUICoreTextView was created by <a href='https://github.com/giladno'>Gilad Novik</a>\r\n\r\nMany thanks for Oliver Drobnik and his amazing work with <a href='https://github.com/Cocoanetics/DTCoreText'>DTCoreText</a>.\r\n\r\n# License\r\n\r\nUICoreTextView is licensed under <a href='http://opensource.org/licenses/zlib-license.php'>zlib</a> license:\r\n\r\n    Copyright (c) 2013 Gilad Novik\r\n\r\n    This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.\r\n\r\n    Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\r\n\r\n    1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\r\n\r\n    2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\r\n\r\n    3. This notice may not be removed or altered from any source distribution.\r\n\r\nYou do not have to mention UICoreTextView in your app, but I'll appreciate if you do so anyway (or at least email me to let me know about your new great app :-)  )\r\n\r\n# Usage\r\n\r\nUse it, fork it, push updates - enjoy it!\r\n","name":"UICoreTextView"}